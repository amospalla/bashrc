#!/bin/bash

# FileVersion=11

# https://software.opensuse.org/download/package?project=isv:ownCloud:desktop&package=owncloud-client

####################
#### Functions #####
####################

show_profiles(){
	find "${profiles_path}" -type f -name "*.conf" | sed -e "s;${profiles_path}/\?;;" -e 's/\.conf$//' | sort
}

check_profile_exists(){
	local profile="${1}"
	[[ ! -f "${profiles_path}/${profile}.conf" ]] && echo "Error: profile does not exist." && exit 1 || true
}

main(){
	local profile="${1}" opts="" output="" output2="" invalid_filename="" ec=0
	. "${profiles_path}/${profile}.conf"
	ping -w1 -c1 ${hostname} >/dev/null 2>&1 || exit 0
	path_remote="$(echo "${path_remote}" | sed 's/^\///')" # Remove heading slash from local path
	[[ -f "${profiles_path}/${profile}.exclude" ]] && opts="${opts} --exclude ${profiles_path}/${profile}.exclude" || true
	if [[ ${2} -eq 1 ]]; then
		echo "owncloudcmd ${opts} -h --trust --non-interactive -n ${path_local} ${hostname}/remote.php/webdav/${path_remote}"
		return 0
	fi

	if ! [[ -w "${path_local}/.sync_dates" ]]; then
		if ! [[ -d "${path_local}/.sync_dates" ]]; then
			if ! mkdir -p "${path_local}/.sync_dates"; then
				echo "[Error] can not create '${path_local}/.sync_dates'."
				exit 1
			fi
		fi
	fi
	[[ -d "${path_local}/.sync_log" ]] || mkdir -p "${path_local}/.sync_log"

	printf "$(date +"%Y%m%d%H%M%S") $(hostname -f)" > "${path_local}/.sync_dates/$(hostname -f)"

	output="$(owncloudcmd ${opts} -h --trust --non-interactive -n ${path_local} https://${hostname}/remote.php/webdav/${path_remote} 2>&1)" && ec=0 || ec=$?
	invalid_filename="$(echo "${output}" | grep -o "Could not complete propagation of.*\(File name contains at least one invalid character\|characters are not supported in file names\)"  | sed -e 's/ by OCC::PropagateIgnoreJob.*//' -e 's/Could not complete propagation of/Invalid filename: /')"
	output2="$(echo "${output}" | sed -e '0,/#### Discovery end ###/d' -e '/#### Reconcile end ###########/,$d' -e 's/.*info sync.csync.reconciler ]:\s*//' | grep -v -e "INSTRUCTION_IGNORE" -e "\.sync_dates" -e "\.sync_log" -e "INSTRUCTION_UPDATE_METADATA\s*[a-z]* dir:" | sort -k 2,2)"
	[[ ${#invalid_filename} -gt 0 ]] && output2="$(echo "${output2}"; echo "${invalid_filename}")" && ec=1
	echo "${output2}" | grep -q "INSTRUCTION_CONFLICT" && ec=1 || true
	[[ ${#output2} -gt 0 ]] && echo "${output2}" > "${path_local}/.sync_log/$(printf "%(%Y%m%d%H%M%S)T")-$(hostname -f).log" || true
	if [[ ${ec} -gt 0 || ${3} -eq 1 ]] && [[ ${#output2} -gt 0 ]]; then
		echo "${output2}"
	fi

	return ${ec}
}

####################
#### Variables #####
####################

profiles_path="${HOME}/.owncloud"

####################
#### Code      #####
####################

if [[ "${1:-}" == execute ]]; then
	main "${2}" "${3}" "${4}"
	exit $?
else
	source "${HOME}/.bashrc"; _source_utilities
	args1='list'
	args2='run_serial {profiles...}'
	args3='[-c|--command] [-l|--log] {profile}'
	arguments_list=(args1 args2 args3)
	arguments_description=('owncloudsync' 'Owncloudcmd wrapper')
	arguments_parameters=( 'list: list available profiles.'
						   'run_serial {profiles}: execute profiles serially.'
						   '[-c|--command] [-l|--log] {profile}: execute profile. -c: only only owncloudcmd command. -l: show log on stdout.' )
	argparse "$@" && shift ${arguments_shift}
	args="${@}"
fi

set -eu o pipefail  -o errtrace

if [[ ${arguments[list]:-0} -eq 1 ]]; then
	show_profiles
	exit 0
elif [[ ${arguments[run_serial]:-0} -eq 1 ]]; then
	ec=0
	for i in ${args}; do
		"${0}" ${i} || ec=1
	done
	exit ${ec}
fi

check_profile_exists "${arguments[profile]}"
profile=${arguments[profile]}
profile=${profile//./-} # lock does not like dots
exec lock lock -f noerror owncloud-${profile} "${0}" execute ${arguments[profile]} ${arguments[--command]:-0}  ${arguments[--log]:-0}
